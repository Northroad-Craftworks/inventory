openapi: "3.0.0"

info:
  title: Northroad Craftworks Inventory
  version: Development

tags:
  - name: Service
    description: Information about the service's status
  - name: Manage Items
    description: Manage inventory items
  - name: Record Transactions
    description: Buy, sell, manufacture, and adjust items in inventory
  - name: Ledger
    description: View the ledger for individual items or inventory as a whole

paths:
  /status:
    get:
      operationId: getStatus
      summary: Get the service status
      tags: [Service]
      responses:
        "200":
          description: General information about the health and status of the service.
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    description: Current release version
                    example: 1.0.0
  /items:
    get:
      operationId: listItems
      summary: List inventory items
      tags: [Manage Items]
      parameters:
        - in: query
          name: hidden
          description: Filter by hidden status
          schema:
            type: boolean
        - in: query
          name: account
          description: Filter by account
          schema:
            $ref: "#/components/schemas/Item/properties/account"
      responses:
        "200":
          description: All inventory items
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
            "text/plain":
              schema:
                description: A text list of all the items in inventory
        default:
          $ref: "#/components/responses/Error"

  /item/{itemId}:
    parameters:
      - $ref: "#/components/parameters/itemId"
    get:
      operationId: readItem
      summary: Get an inventory item
      tags: [Manage Items]
      responses:
        "200":
          description: Details about the inventory item
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Item"
        default:
          $ref: "#/components/responses/Error"
    put:
      operationId: createItem
      summary: Create an inventory item
      tags: [Manage Items]
      requestBody:
        description: Inventory item data
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        "201":
          description: Inventory item created
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Item"
        "200":
          description: Inventory item updated
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Item"
        default:
          $ref: "#/components/responses/Error"
    patch:
      operationId: updateItem
      summary: Update an inventory item
      tags: [Manage Items]
      requestBody:
        description: Updates to inventory data
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        "200":
          description: Inventory item updated
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Item"
        default:
          $ref: "#/components/responses/Error"
    delete:
      operationId: deleteItem
      summary: Delete an unused inventory item
      description: |
        Inventory items can only be deleted if they haven't been used for any transactions and don't exist on any
        ledgers. Once an inventory item has been bought, sold, or manufactured, it cannot be deleted until **all**
        transactions which reference it have been deleted or archived.
      tags: [Manage Items]
      responses:
        "200":
          description: Delete successfully
        default:
          $ref: "#/components/responses/Error"

  /buy:
    post:
      operationId: recordPurchase
      summary: Record the purchase of new inventory
      tags: [Record Transactions]
      requestBody:
        description: Transaction details
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Purchase"
      responses:
        "201":
          description: "Transaction created"
          content:
            "application/json":
              "schema":
                $ref: "#/components/schemas/Purchase"
        default:
          $ref: "#/components/responses/Error"

  /sell:
    post:
      operationId: recordSale
      summary: Record the sale of inventory to customers
      tags: [Record Transactions]
      requestBody:
        description: Transaction details
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Sale"
      responses:
        "201":
          description: "Transaction created"
          content:
            "application/json":
              "schema":
                $ref: "#/components/schemas/Sale"
        default:
          $ref: "#/components/responses/Error"

  /make:
    post:
      operationId: recordManufacture
      summary: Manufacture new inventory items from existing ones
      tags: [Record Transactions]
      requestBody:
        description: Transaction details
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Manufacture"
      responses:
        "201":
          description: "Transaction created"
          content:
            "application/json":
              "schema":
                $ref: "#/components/schemas/Manufacture"
        default:
          $ref: "#/components/responses/Error"

  /adjust:
    post:
      operationId: recordAuditTransaction
      summary: Manually adjust inventory items as the result of loss, damage, waste, or audits
      tags: [Record Transactions]
      deprecated: true
      responses:
        "501":
          description: Not implemented
  
  /ledger:
    parameters:
      - $ref: "#/components/parameters/itemIdQuery"
    get:
      operationId: getLedger
      summary: Get entries from the ledger
      tags: [Ledger]
      responses:
        "200":
          description: The ledger of transactions
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Ledger"
            "text/plain":
              schema:
                description: A text list of all the ledger entries
        default:
          $ref: "#/components/responses/Error"
  
  /transactions:
    get:
      operationId: listTransactions
      summary: List all the transactions
      tags: [Ledger]
      responses:
        "200":
          description: A list of transactions
          content:
            "application/json":
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/Purchase"
                    - $ref: "#/components/schemas/Sale"
                    - $ref: "#/components/schemas/Manufacture"
                  discriminator:
                    propertyName: type
        default:
          $ref: "#/components/responses/Error"

  /transaction/{transactionId}:
    parameters:
      - $ref: "#/components/parameters/transactionId"
    get:
      operationId: getTransaction
      summary: Get a record of a transaction
      tags: [Ledger]
      responses:
        "200":
          description: Details about the transaction
          content:
            "application/json":
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Purchase"
                  - $ref: "#/components/schemas/Sale"
                  - $ref: "#/components/schemas/Manufacture"
                discriminator:
                  propertyName: type
        default:
          $ref: "#/components/responses/Error"

components:
  parameters:
    itemId:
      name: itemId
      in: path
      required: true
      description: The `id` of the desired item
      schema:
        readOnly: false
        $ref: "#/components/schemas/Item/properties/id"
    transactionId:
      name: transactionId
      in: path
      required: true
      description: The `id` of the desired transaction
      schema:
        type: string
    itemIdQuery:
      in: query
      name: item
      description: Filter by item ID
      schema:
        readOnly: false
        $ref: "#/components/schemas/Item/properties/id"

  responses:
    Error:
      description: Something went wrong
      content:
        'text/plain':
          schema:
            type: string
            description: A description of the problem
            example: 'Internal server error'


  schemas:        
    Purchase:
      type: object
      description: A transaction which purchases materials or items for resale.
      required: [id, type, description, user, items]
      additionalProperties: false
      properties:
        date:
          type: string
          format: date-time
          description: The timestamp of the transaction.
        id:
          type: string
          description: Unique ID for the transaction.
          pattern: "[a-z0-9-]+"
        type:
          readOnly: true
          type: string
          description: Type of transaction.
        description:
          type: string
          description: A short description of the transaction.
          example: ""
        user:
          readOnly: true
          type: string
          description: The user who entered the transaction.
          example: anonymous
          # TODO Define a user format
        audited:
          readOnly: true
          type: boolean
          description: Whether or not this transaction has been audited for accuracy.
        items:
          type: array
          description: A list of all the items purchased.
          items:
            type: object
            required: [quantity, cost]
            additionalProperties: false
            properties:
              id:
                $ref: "#/components/schemas/Item/properties/id"
                readOnly: false
                description: The item ID of the item purchased.
              quantity:
                type: number
                minimum: 1
                description: |
                  The amount of the item purchased
                  Must be a positive number, as it increases inventory.
                example: 250
              cost:
                type: number
                minimum: 0
                description: The **total** price of all units, excluding tax and shipping.
                example: 1500
              unitCost:
                readOnly: true
                type: number
                description: The calculated cost-per-unit of the item in the transaction.
                example: 6
        costAdjustments:
          description: |
            Other cost adjustments which apply to the whole transaction rather than individual items.
            This includes additional costs, such as taxes or shipping, as well as discounts or credits.
            These adjusments are added to cost of items (proportionally to their costs) when determining inventory value.
          type: array
          items:
            type: object
            required: [name, cost]
            additionalProperties:
              description: Additional information that may be needed for records, such as tax jurisdiction.
              type: string
            properties:
              name:
                type: string
                description: Name of the additional cost or discount, for reporting
              cost:
                type: number
                description: |
                  Value of the additional cost.
                  Positive numbers represent fees such as taxes and shipping
                  Negative numbers represent discounts or refunds.
            example:
              name: shipping
              cost: 8.99
    
    Sale:
      type: object
      description: A transaction which sells items
      required: [id, type, description, user, items]
      additionalProperties: false
      properties:
        date:
          type: string
          format: date-time
          description: The timestamp of the transaction.
        id:
          type: string
          description: Unique ID for the transaction.
          pattern: "[a-z0-9-]+"
        type:
          readOnly: true
          type: string
          description: Type of transaction.
        description:
          type: string
          description: A short description of the transaction.
          example: ""
        user:
          readOnly: true
          type: string
          description: The user who entered the transaction.
          example: anonymous
          # TODO Define a user format
        audited:
          readOnly: true
          type: boolean
          description: Whether or not this transaction has been audited for accuracy.
        items:
          type: array
          description: A list of all the items sold.
          items:
            type: object
            required: [quantity]
            additionalProperties: false
            properties:
              id:
                $ref: "#/components/schemas/Item/properties/id"
                readOnly: false
                description: The item ID of the item sold.
              quantity:
                type: number
                minimum: 1
                description: |
                  The amount of the item sold.
                  Although this is a positive number, it is _subtracted_ from total inventory quantity.
              cost:
                readOnly: true
                type: number
                minimum: 0
                description: |
                  The calculated cost of the items, based on the inventory value at the time of the sale.
                  Although this is a positive number, it is _subtracted_ from total inventory value.
              unitCost:
                readOnly: true
                type: number
                description: The calculated cost-per-unit of the item in the transaction.
    
    Manufacture:
      type: object
      description: |
        A transaction which manufactures one item from materials.
        Multiple different `materials` may be consumed and the values of each are determined at the time of the transaction.
        Only one `product` can be produced, however, and its value is the sum total of all `materials` and `additionalCosts`.
      required: [id, type, description, user, items]
      additionalProperties: false
      properties:
        date:
          type: string
          format: date-time
          description: The timestamp of the transaction.
        id:
          type: string
          description: Unique ID for the transaction.
          pattern: "[a-z0-9-]+"
        type:
          readOnly: true
          type: string
          description: Type of transaction.
        description:
          type: string
          description: A short description of the transaction.
          example: ""
        user:
          readOnly: true
          type: string
          description: The user who entered the transaction.
          example: anonymous
          # TODO Define a user format
        audited:
          readOnly: true
          type: boolean
          description: Whether or not this transaction has been audited for accuracy.
        materials:
          type: array
          description: A list of all the items consumed to make the product.
          items:
            type: object
            required: [quantity, cost, unitCost]
            additionalProperties: false
            properties:
              id:
                $ref: "#/components/schemas/Item/properties/id"
                readOnly: false
                description: The item ID of the material.
              quantity:
                type: number
                minimum: 1
                description: |
                  The amount of the item consumed.
                  Although this is a positive number, it is _subtracted_ from total inventory quantity.
              cost:
                readOnly: true
                type: number
                minimum: 0
                description: |
                  The calculated cost of the items, based on the inventory value at the time of the sale.
                  Although this is a positive number, it is _subtracted_ from total inventory value.
              unitCost:
                readOnly: true
                type: number
                description: The calculated cost-per-unit of the item in the transaction.
        additionalCosts:
          description: |
            Other costs, such as labor, that are directly related to the manufacturing.
            The sum of these costs are added to the final cost-of-goods-made.
          type: array
          items:
            type: object
            required: [name, cost]
            additionalProperties:
              description: Additional information that may be needed for records
              type: string
            properties:
              name:
                type: string
                description: Name of the additional cost, to identify it.
                example: labor
              cost:
                type: number
                minimum: 0
                description: The value of the additional cost.
        productId: 
          $ref: "#/components/schemas/Item/properties/id"
          readOnly: false
          description: The item ID of the product.
        productQuantity:
          type: number
          minimum: 0
          description: The amount of the item produced.
            
    Ledger:
      readOnly: true
      type: array
      description: A list of all the transactions which have affected an item, including calculated total inventory values.
      items:
        type: object
        readOnly: true
        description: A single ledger entry, describing a transaction and updating the value of the inventory.
        required: [date, id, type, quantity, cost, unitCost, totalQuantity, totalCost, totalUnitCost]
        additionalProperties: false
        properties:
          date:
            type: string
            format: date-time
            description: The timestamp of the transaction.
          id:
            type: string
            description: Unique ID for the transaction.
            pattern: "[a-z0-9-]+"
          type:
            readOnly: true
            type: string
            description: Type of transaction.
          description:
            type: string
            description: A short description of the transaction.
            example: ""
          user:
            readOnly: true
            type: string
            description: The user who entered the transaction.
            example: anonymous
            # TODO Define a user format
          audited:
            readOnly: true
            type: boolean
            description: Whether or not this transaction has been audited for accuracy.
          itemId:
            $ref: "#/components/schemas/Item/properties/id"
            readOnly: false
            description: The item ID of the item affected.
          quantity:
            type: number
            description: |
              The quantity of items in the transaction, in relation to inventory.
              Positive numbers represent purchases and manufactured items, adding to inventory quantity.
              Negative numbers represent sales and consumed items, subtracting from inventory quantity.
          cost:
            type: number
            description: |
              The value of items in the transaction, in relation to inventory value.
              Positive numbers represent purchases and manufactured items, adding to inventory value.
              Negative numbers represent sales and consumed items, subtracting from inventory value.
          unitCost:
            type: number
            minimum: 0
            description: |
              The cost-per-unit for items in the transaction.
              This is always a positive number, as it's derived from `value / quantity` and those must have the same sign.      

    Item:
      type: object
      required: [id]
      additionalProperties: false
      properties:
        id:
          readOnly: true
          type: string
          description: Unique ID or SKU of the material, part, or product.
          pattern: "[a-z0-9-]+"
          example: widget-blue-2in
        name:
          type: string
          description: Friendly name for display.
          example: 2" Blue Widget
        account:
          type: string
          description: The asset account associated with the item.
          enum:
            - Raw Materials
            - In-Progress
            - Finished
          default: Raw Materials
        unit:
          type: string
          description: |
            Unit of measure for the material.

            Examples:
            - each
            - bd.ft.
            - fl.oz.
          default: each
        quantity:
          readOnly: true
          type: number
          description: The quantity of the item currently in inventory.
          example: 2
        totalCost:
          readOnly: true
          type: number
          description: The total cost of all the units currently in inventory.
          example: 4.00
        unitCost:
          readOnly: true
          type: number
          description: The per-unit cost of each unit currently in inventory.
          example: 2.00
        hidden:
          type: boolean
          description: If `true`, the item should be hidden from selection lists and displays.
          default: false